#include "KeysMapping.hpp"

#include <X11/keysym.h>

#include <unordered_map>

unsigned int SDLKeySymToX11(SDL_Keycode sym) {
    static std::unordered_map<SDL_Keycode, unsigned int> sdl_to_x11{
            {SDLK_BACKSPACE, XK_BackSpace},
            {SDLK_TAB, XK_Tab},
            {SDLK_CLEAR, XK_Clear},
            {SDLK_RETURN, XK_Return},
            {SDLK_PAUSE, XK_Pause},
            {SDLK_ESCAPE, XK_Escape},
            {SDLK_DELETE, XK_Delete},
            {SDLK_KP_0, XK_KP_0},
            {SDLK_KP_1, XK_KP_1},
            {SDLK_KP_2, XK_KP_2},
            {SDLK_KP_3, XK_KP_3},
            {SDLK_KP_4, XK_KP_4},
            {SDLK_KP_5, XK_KP_5},
            {SDLK_KP_6, XK_KP_6},
            {SDLK_KP_7, XK_KP_7},
            {SDLK_KP_8, XK_KP_8},
            {SDLK_KP_9, XK_KP_9},
            {SDLK_KP_PERIOD, XK_KP_Decimal},
            {SDLK_KP_DIVIDE, XK_KP_Divide},
            {SDLK_KP_MULTIPLY, XK_KP_Multiply},
            {SDLK_KP_MINUS, XK_KP_Subtract},
            {SDLK_KP_PLUS, XK_KP_Add},
            {SDLK_KP_ENTER, XK_KP_Enter},
            {SDLK_KP_EQUALS, XK_KP_Equal},
            {SDLK_UP, XK_Up},
            {SDLK_DOWN, XK_Down},
            {SDLK_RIGHT, XK_Right},
            {SDLK_LEFT, XK_Left},
            {SDLK_INSERT, XK_Insert},
            {SDLK_HOME, XK_Home},
            {SDLK_END, XK_End},
            {SDLK_PAGEUP, XK_Page_Up},
            {SDLK_PAGEDOWN, XK_Page_Down},
            {SDLK_F1, XK_F1},
            {SDLK_F2, XK_F2},
            {SDLK_F3, XK_F3},
            {SDLK_F4, XK_F4},
            {SDLK_F5, XK_F5},
            {SDLK_F6, XK_F6},
            {SDLK_F7, XK_F7},
            {SDLK_F8, XK_F8},
            {SDLK_F9, XK_F9},
            {SDLK_F10, XK_F10},
            {SDLK_F11, XK_F11},
            {SDLK_F12, XK_F12},
            {SDLK_F13, XK_F13},
            {SDLK_F14, XK_F14},
            {SDLK_F15, XK_F15},
            {SDLK_NUMLOCKCLEAR, XK_Num_Lock},
            {SDLK_CAPSLOCK, XK_Caps_Lock},
            {SDLK_SCROLLLOCK, XK_Scroll_Lock},
            {SDLK_RSHIFT, XK_Shift_R},
            {SDLK_LSHIFT, XK_Shift_L},
            {SDLK_RCTRL, XK_Control_R},
            {SDLK_LCTRL, XK_Control_L},
            {SDLK_RALT, XK_Alt_R},
            {SDLK_LALT, XK_Alt_L},
            {SDLK_LGUI, XK_Super_L},
            {SDLK_RGUI, XK_Super_R},
            {SDLK_MODE, XK_Mode_switch},
            {SDLK_HELP, XK_Help},
            {SDLK_PRINTSCREEN, XK_Print},
            {SDLK_SYSREQ, XK_Sys_Req},
    };
    if (sdl_to_x11.contains(sym)) {
        return sdl_to_x11.at(sym);
    }
    return static_cast<unsigned int>(sym);
}
